# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-06-24 08:45
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlockUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': '已存在一位使用该名字的用户。'}, help_text='必填。150个字符或者更少。包含字母，数字和仅有的@/./+/-/_符号。', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='用户名')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='名字')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='姓氏')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='电子邮件地址')),
                ('is_staff', models.BooleanField(default=False, help_text='指明用户是否可以登录到这个管理站点。', verbose_name='职员状态')),
                ('is_active', models.BooleanField(default=True, help_text='指明用户是否被认为活跃的。以反选代替删除帐号。', verbose_name='有效')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='加入日期')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
